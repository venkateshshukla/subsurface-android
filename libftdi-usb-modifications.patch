From 76a42bd0bcec38ed40d37517015a4ff91658b7e3 Mon Sep 17 00:00:00 2001
From: Venkatesh Shukla <venkatesh.shukla.eee11@iitbhu.ac.in>
Date: Tue, 10 Jun 2014 10:37:21 +0530
Subject: [PATCH] Added functions for open using USB file descriptor

Android USB api provides file descriptor. This can be utilised to make a libusb
device. Libusb has been adequately modified to utilise fd. Added functions
which to use corresponding libusb functions. One crucial point is not to close
the USB device Libftdi normally closes the usb device and opens it again when to
be used. To do that on android, one had to go back to Android java API. Hence,
do not close the device nor try to open it again on android.

libusb_open_fd is a function that is needed on android. But if it is not
present, do not fail. Just dont compile functions that require this.

Signed-off-by: Venkatesh Shukla <venkatesh.shukla.eee11@iitbhu.ac.in>
---
 CMakeLists.txt |   8 ++
 src/ftdi.c     | 272 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/ftdi.h     |   7 ++
 3 files changed, 287 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ee21a8f..4559d10 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,6 +26,14 @@ endif(${CMAKE_BUILD_TYPE} STREQUAL Debug)
 find_package ( USB1 REQUIRED )
 include_directories ( ${LIBUSB_INCLUDE_DIR} )
 
+set(CMAKE_REQUIRED_INCLUDES ${LIBUSB_INCLUDE_DIR})
+set(CMAKE_REQUIRED_LIBRARIES ${LIBUSB_LIBRARIES})
+include(CheckFunctionExists)
+check_function_exists(libusb_open_fd HAVE_LIBUSB_OPEN_FD)
+if ( DEFINED HAVE_LIBUSB_OPEN_FD)
+	add_definitions(-DHAVE_LIBUSB_OPEN_FD)
+endif ()
+
 # Find Boost (optional package)
 find_package(Boost)
 
diff --git a/src/ftdi.c b/src/ftdi.c
index c62428d..54d6edf 100644
--- a/src/ftdi.c
+++ b/src/ftdi.c
@@ -623,6 +623,132 @@ int ftdi_usb_open_dev(struct ftdi_context *ftdi, libusb_device *dev)
     ftdi_error_return(0, "all fine");
 }
 
+#ifdef HAVE_LIBUSB_OPEN_FD
+/**
+    Opens a ftdi device given by an usb_device using the given file descriptor.
+    To be used on android.
+
+    \param ftdi pointer to ftdi_context
+    \param dev libusb usb_dev to use
+    \param fd USB file descriptor
+
+    \retval  0: all fine
+    \retval -3: unable to config device
+    \retval -4: unable to open device
+    \retval -5: unable to claim device
+    \retval -6: reset failed
+    \retval -7: set baudrate failed
+    \retval -8: ftdi context invalid
+    \retval -9: libusb_get_device_descriptor() failed
+    \retval -10: libusb_get_config_descriptor() failed
+    \retval -11: libusb_detach_kernel_driver() failed
+    \retval -12: libusb_get_configuration() failed
+*/
+int ftdi_usb_open_fd_dev(struct ftdi_context *ftdi, libusb_device *dev, int fd)
+{
+    struct libusb_device_descriptor desc;
+    struct libusb_config_descriptor *config0;
+    int cfg, cfg0, detach_errno = 0;
+
+    if (ftdi == NULL)
+        ftdi_error_return(-8, "ftdi context invalid");
+
+    // As the USB device is already opened, do not open it
+    // again.
+
+    if (libusb_get_device_descriptor(dev, &desc) < 0)
+        ftdi_error_return(-9, "libusb_get_device_descriptor() failed");
+
+    if (libusb_get_config_descriptor(dev, 0, &config0) < 0)
+        ftdi_error_return(-10, "libusb_get_config_descriptor() failed");
+    cfg0 = config0->bConfigurationValue;
+    libusb_free_config_descriptor (config0);
+
+    // Try to detach ftdi_sio kernel module.
+    //
+    // The return code is kept in a separate variable and only parsed
+    // if usb_set_configuration() or usb_claim_interface() fails as the
+    // detach operation might be denied and everything still works fine.
+    // Likely scenario is a static ftdi_sio kernel module.
+    if (ftdi->module_detach_mode == AUTO_DETACH_SIO_MODULE)
+    {
+        if (libusb_detach_kernel_driver(ftdi->usb_dev, ftdi->interface) !=0)
+            detach_errno = errno;
+    }
+
+    if (libusb_get_configuration (ftdi->usb_dev, &cfg) < 0)
+        ftdi_error_return(-12, "libusb_get_configuration () failed");
+    // set configuration (needed especially for windows)
+    // tolerate EBUSY: one device with one configuration, but two interfaces
+    //    and libftdi sessions to both interfaces (e.g. FT2232)
+    if (desc.bNumConfigurations > 0 && cfg != cfg0)
+    {
+        if (libusb_set_configuration(ftdi->usb_dev, cfg0) < 0)
+        {
+            ftdi_usb_close_internal (ftdi);
+            if (detach_errno == EPERM)
+            {
+                ftdi_error_return(-8, "inappropriate permissions on device!");
+            }
+            else
+            {
+                ftdi_error_return(-3, "unable to set usb configuration. Make sure the default FTDI driver is not in use");
+            }
+        }
+    }
+
+    if (libusb_claim_interface(ftdi->usb_dev, ftdi->interface) < 0)
+    {
+        ftdi_usb_close_internal (ftdi);
+        if (detach_errno == EPERM)
+        {
+            ftdi_error_return(-8, "inappropriate permissions on device!");
+        }
+        else
+        {
+            ftdi_error_return(-5, "unable to claim usb device. Make sure the default FTDI driver is not in use");
+        }
+    }
+
+    if (ftdi_usb_reset (ftdi) != 0)
+    {
+        ftdi_usb_close_internal (ftdi);
+        ftdi_error_return(-6, "ftdi_usb_reset failed");
+    }
+
+    // Try to guess chip type
+    // Bug in the BM type chips: bcdDevice is 0x200 for serial == 0
+    if (desc.bcdDevice == 0x400 || (desc.bcdDevice == 0x200
+                                    && desc.iSerialNumber == 0))
+        ftdi->type = TYPE_BM;
+    else if (desc.bcdDevice == 0x200)
+        ftdi->type = TYPE_AM;
+    else if (desc.bcdDevice == 0x500)
+        ftdi->type = TYPE_2232C;
+    else if (desc.bcdDevice == 0x600)
+        ftdi->type = TYPE_R;
+    else if (desc.bcdDevice == 0x700)
+        ftdi->type = TYPE_2232H;
+    else if (desc.bcdDevice == 0x800)
+        ftdi->type = TYPE_4232H;
+    else if (desc.bcdDevice == 0x900)
+        ftdi->type = TYPE_232H;
+    else if (desc.bcdDevice == 0x1000)
+        ftdi->type = TYPE_230X;
+
+    // Determine maximum packet size
+    ftdi->max_packet_size = _ftdi_determine_max_packet_size(ftdi, dev);
+
+    if (ftdi_set_baudrate (ftdi, 9600) != 0)
+    {
+        ftdi_usb_close_internal (ftdi);
+        ftdi_error_return(-7, "set baudrate failed");
+    }
+
+    ftdi_error_return(0, "all fine");
+}
+#endif //HAVE_LIBUSB_OPEN_FD
+
 /**
     Opens the first device with a given vendor and product ids.
 
@@ -760,6 +886,152 @@ int ftdi_usb_open_desc_index(struct ftdi_context *ftdi, int vendor, int product,
     ftdi_error_return_free_device_list(-3, "device not found", devs);
 }
 
+#ifdef HAVE_LIBUSB_OPEN_FD
+/**
+    Opens the first device with a given vendor and product ids.
+
+    \param ftdi pointer to ftdi_context
+    \param vendor Vendor ID
+    \param product Product ID
+    \param fd USB file descriptor
+
+    \retval same as ftdi_usb_open_desc()
+*/
+int ftdi_usb_open_fd(struct ftdi_context *ftdi, int vendor, int product, int fd)
+{
+    return ftdi_usb_open_fd_desc(ftdi, vendor, product, NULL, NULL, fd);
+}
+
+/**
+    Opens the first device with a given, vendor id, product id,
+    description and serial.
+
+    \param ftdi pointer to ftdi_context
+    \param vendor Vendor ID
+    \param product Product ID
+    \param description Description to search for. Use NULL if not needed.
+    \param serial Serial to search for. Use NULL if not needed.
+    \param fd USB file descriptor
+
+    \retval  0: all fine
+    \retval -3: usb device not found
+    \retval -4: unable to open device
+    \retval -5: unable to claim device
+    \retval -6: reset failed
+    \retval -7: set baudrate failed
+    \retval -8: get product description failed
+    \retval -9: get serial number failed
+    \retval -12: libusb_get_device_list() failed
+    \retval -13: libusb_get_device_descriptor() failed
+*/
+int ftdi_usb_open_fd_desc(struct ftdi_context *ftdi, int vendor, int product,
+                       const char* description, const char* serial, int fd)
+{
+    return ftdi_usb_open_fd_desc_index(ftdi,vendor,product,description,serial,0, fd);
+}
+
+/**
+    Opens the index-th device with a given, vendor id, product id,
+    description and serial.
+
+    \param ftdi pointer to ftdi_context
+    \param vendor Vendor ID
+    \param product Product ID
+    \param description Description to search for. Use NULL if not needed.
+    \param serial Serial to search for. Use NULL if not needed.
+    \param index Number of matching device to open if there are more than one, starts with 0.
+    \param fd USB file descriptor
+
+    \retval  0: all fine
+    \retval -1: usb_find_busses() failed
+    \retval -2: usb_find_devices() failed
+    \retval -3: usb device not found
+    \retval -4: unable to open device
+    \retval -5: unable to claim device
+    \retval -6: reset failed
+    \retval -7: set baudrate failed
+    \retval -8: get product description failed
+    \retval -9: get serial number failed
+    \retval -10: unable to close device
+    \retval -11: ftdi context invalid
+*/
+int ftdi_usb_open_fd_desc_index(struct ftdi_context *ftdi, int vendor, int product,
+                             const char* description, const char* serial, unsigned int index, int fd)
+{
+    libusb_device *dev;
+    libusb_device **devs;
+    char string[256];
+    int i = 0;
+
+    if (ftdi == NULL)
+        ftdi_error_return(-11, "ftdi context invalid");
+
+    if (libusb_get_device_list(ftdi->usb_ctx, &devs) < 0)
+        ftdi_error_return(-12, "libusb_get_device_list() failed");
+
+    while ((dev = devs[i++]) != NULL)
+    {
+        struct libusb_device_descriptor desc;
+        int res;
+
+        if (libusb_get_device_descriptor(dev, &desc) < 0)
+            ftdi_error_return_free_device_list(-13, "libusb_get_device_descriptor() failed", devs);
+
+        if (desc.idVendor == vendor && desc.idProduct == product)
+        {
+            if (libusb_open_fd(dev, &ftdi->usb_dev, fd) < 0)
+                ftdi_error_return_free_device_list(-4, "usb_open() failed", devs);
+
+            if (description != NULL)
+            {
+                if (libusb_get_string_descriptor_ascii(ftdi->usb_dev, desc.iProduct, (unsigned char *)string, sizeof(string)) < 0)
+                {
+                    ftdi_usb_close_internal (ftdi);
+                    ftdi_error_return_free_device_list(-8, "unable to fetch product description", devs);
+                }
+                if (strncmp(string, description, sizeof(string)) != 0)
+                {
+                    ftdi_usb_close_internal (ftdi);
+                    continue;
+                }
+            }
+            if (serial != NULL)
+            {
+                if (libusb_get_string_descriptor_ascii(ftdi->usb_dev, desc.iSerialNumber, (unsigned char *)string, sizeof(string)) < 0)
+                {
+                    ftdi_usb_close_internal (ftdi);
+                    ftdi_error_return_free_device_list(-9, "unable to fetch serial number", devs);
+                }
+                if (strncmp(string, serial, sizeof(string)) != 0)
+                {
+                    ftdi_usb_close_internal (ftdi);
+                    continue;
+                }
+            }
+
+	    // After going to such lengths to retrieve the file descriptor
+	    // of USB device, do not close the device. It wil render all the
+	    // effort useless.
+
+            //ftdi_usb_close_internal (ftdi);
+
+            if (index > 0)
+            {
+                index--;
+                continue;
+            }
+
+            res = ftdi_usb_open_fd_dev(ftdi, dev, fd);
+            libusb_free_device_list(devs,1);
+            return res;
+        }
+    }
+
+    // device not found
+    ftdi_error_return_free_device_list(-3, "device not found", devs);
+}
+#endif // HAVE_LIBUSB_OPEN_FD
+
 /**
     Opens the ftdi-device described by a description-string.
     Intended to be used for parsing a device-description given as commandline argument.
diff --git a/src/ftdi.h b/src/ftdi.h
index 07fcd71..9261cf4 100644
--- a/src/ftdi.h
+++ b/src/ftdi.h
@@ -485,6 +485,13 @@ extern "C"
     int ftdi_usb_open_dev(struct ftdi_context *ftdi, struct libusb_device *dev);
     int ftdi_usb_open_string(struct ftdi_context *ftdi, const char* description);
 
+    int ftdi_usb_open_fd(struct ftdi_context *ftdi, int vendor, int product, int fd);
+    int ftdi_usb_open_fd_desc(struct ftdi_context *ftdi, int vendor, int product,
+                           const char* description, const char* serial, int fd);
+    int ftdi_usb_open_fd_desc_index(struct ftdi_context *ftdi, int vendor, int product,
+                                 const char* description, const char* serial, unsigned int index, int fd);
+    int ftdi_usb_open_fd_dev(struct ftdi_context *ftdi, struct libusb_device *dev, int fd);
+
     int ftdi_usb_close(struct ftdi_context *ftdi);
     int ftdi_usb_reset(struct ftdi_context *ftdi);
     int ftdi_usb_purge_rx_buffer(struct ftdi_context *ftdi);
-- 
1.9.3

